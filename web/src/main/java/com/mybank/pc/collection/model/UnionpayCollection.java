package com.mybank.pc.collection.model;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.jsoup.helper.StringUtil;

import com.alibaba.fastjson.annotation.JSONField;
import com.jfinal.kit.JsonKit;
import com.jfinal.kit.Kv;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.SqlPara;
import com.mybank.pc.collection.model.base.BaseUnionpayCollection;
import com.mybank.pc.collection.model.sender.RealtimeRequestBuilder;
import com.mybank.pc.collection.model.sender.SendProxy;
import com.mybank.pc.exception.ValidateUnionpayRespException;
import com.mybank.pc.kits.unionpay.acp.SDK;
import com.mybank.pc.kits.unionpay.acp.SDKConfig;
import com.mybank.pc.kits.unionpay.acp.SDKConstants;

/**
 * Generated by JFinal.
 */
public class UnionpayCollection extends BaseUnionpayCollection<UnionpayCollection> {
	private static final long serialVersionUID = 1L;

	public static final int TIMEOUT_MINUTE = 10;

	public static final UnionpayCollection dao = new UnionpayCollection().dao();

	private SendProxy sendProxy;

	public void toEntrustCollection() {
		SDK sdk = SDK.getByMerId(getMerId());
		SDKConfig sdkConfig = sdk.getSdkConfig();

		setVersion(sdkConfig.getVersion());
		setEncoding(SDKConstants.UTF_8_ENCODING);
		setTxnSubType("02");
		setAccType("01");// 账号类型
		setAccessType("0");// 接入类型，商户接入固定填0，不需修改
		setBizType("000501");// 业务类型
		setChannelType("07");// 渠道类型
		setCurrencyCode("156");// 交易币种（境内商户一般是156 人民币）
	}

	public void toCollection() {
		SDK sdk = SDK.getByMerId(getMerId());
		SDKConfig sdkConfig = sdk.getSdkConfig();

		setVersion(sdkConfig.getVersion());
		setEncoding(SDKConstants.UTF_8_ENCODING);
		setTxnSubType("00");
		setAccType("01");// 账号类型
		setAccessType("0");// 接入类型，商户接入固定填0，不需修改
		setBizType("000501");// 业务类型
		setChannelType("07");// 渠道类型
		setCurrencyCode("156");// 交易币种（境内商户一般是156 人民币）
	}

	public UnionpayCollection assemblyRealtimeRequest() {
		this.sendProxy = new RealtimeRequestBuilder(this).build();
		setReq(JsonKit.toJson(sendProxy.getReqData()));
		return this;
	}

	public SendProxy sendRealtimeOrder() throws Exception {
		if (sendProxy == null) {
			assemblyRealtimeRequest();
		}
		sendProxy.send();
		this.setResp(JsonKit.toJson(sendProxy.getRspData()));
		return sendProxy;
	}

	@JSONField(serialize = false)
	public Map<String, String> getRealtimeRspData() {
		return sendProxy == null ? null : sendProxy.getRspData();
	}

	public boolean validateRealtimeResp() throws ValidateUnionpayRespException {
		return sendProxy.validateResp();
	}

	public UnionpayCollectionQuery buildQuery() {
		return buildQuery(null);
	}

	public UnionpayCollectionQuery buildQuery(String operID) {
		UnionpayCollectionQuery query = new UnionpayCollectionQuery();
		Date now = new Date();
		String reqReserved = "from=pac";

		query.setTxnType("00");
		query.setTxnSubType("00");
		query.setBizType("000501");
		query.setAccessType("0");

		query.setMerId(getMerId());
		query.setOrderId(getOrderId());
		query.setTxnTime(getTxnTime());

		query.setPlanId(getPlanId());
		query.setExecutionId(getExecutionId());
		query.setVersion(getVersion());
		query.setEncoding(getEncoding());
		query.setBatchNo(getBatchNo());
		query.setMerchantID(getMerchantID());
		query.setReqReserved(reqReserved);

		query.setCat(now);
		query.setMat(now);
		query.setOperID(operID);

		query.assemblyQueryRequest();
		return query;
	}

	/**
	 * 重置批量交易状态为待发送
	 */
	public void resetBatchStatus() {
		setBatchNo("");
		setTxnTime("");
		setStatus("0");
	}

	/**
	 * 是否是批量交易订单
	 * 
	 * @return
	 */
	public boolean isBatchTradeOrder() {
		return "21".equals(getTxnType());
	}

	public UnionpayBatchCollection findUnionpayBatchCollection() {
		if (isBatchTradeOrder()) {
			String batchId = getBatchId();
			String merId = getMerId();
			String batchNo = getBatchNo();
			String txnTime = getTxnTime();
			UnionpayBatchCollection result = UnionpayBatchCollection.findByIdOrBizColumn(batchId, merId, batchNo,
					txnTime);
			if (result == null) {
				throw new RuntimeException("批量交易信息不存在["
						+ Kv.by("batchId", batchId).set("merId", merId).set("batchNo", batchNo).set("txnTime", txnTime)
						+ "]");
			}
			return result;
		}
		return null;
	}

	public static boolean isFailCode(String resultCode) {
		return StringUtils.isNotBlank(resultCode) && !("00".equals(resultCode) || "A6".equals(resultCode)
				|| "03".equals(resultCode) || "04".equals(resultCode) || "05".equals(resultCode));
	}

	public static int updateToBeSentUnionpayCollectionBatchNo(Kv kv) {
		SqlPara sqlPara = Db.getSqlPara("collection_batch.updateToBeSentUnionpayCollectionBatchNo", kv);
		return Db.update(sqlPara);
	}

	public static List<UnionpayCollection> findToBeSentUnionpayCollectionByBatchNo(Kv kv) {
		SqlPara sqlPara = Db.getSqlPara("collection_batch.findToBeSentUnionpayCollectionByBatchNo", kv);
		return UnionpayCollection.dao.find(sqlPara);
	}

	public static Record tradeHomePageTotal(Kv kv) {
		SqlPara sqlPara = Db.getSqlPara("collection_trade.tradeHomePageTotal", kv);
		return Db.findFirst(sqlPara);
	}

	public static UnionpayCollection findByOrderId(String orderId) {
		if (StringUtil.isBlank(orderId)) {
			return null;
		} else {
			SqlPara sqlPara = Db.getSqlPara("collection_trade.findUnionpayCollection",
					Kv.create().set("orderId", orderId));
			return UnionpayCollection.dao.findFirst(sqlPara);
		}
	}

	public static UnionpayCollection findByOrderIdAndMerchantID(String orderId, String merchantID) {
		if (StringUtil.isBlank(orderId) || StringUtils.isBlank(merchantID)) {
			return null;
		} else {
			SqlPara sqlPara = Db.getSqlPara("collection_trade.findUnionpayCollection",
					Kv.create().set("orderId", orderId).set("merchantID", merchantID));
			return UnionpayCollection.dao.findFirst(sqlPara);
		}
	}

	public static UnionpayCollection findByTradeNo(String tradeNo) {
		SqlPara sqlPara = Db.getSqlPara("collection_trade.findUnionpayCollection", Kv.create().set("tradeNo", tradeNo));
		return UnionpayCollection.dao.findFirst(sqlPara);
	}

	@JSONField(serialize = false)
	public SendProxy getSendProxy() {
		return this.sendProxy;
	}

}
