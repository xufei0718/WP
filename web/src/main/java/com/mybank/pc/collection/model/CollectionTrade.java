package com.mybank.pc.collection.model;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang.StringUtils;

import com.jfinal.kit.Kv;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.SqlPara;
import com.mybank.pc.admin.model.User;
import com.mybank.pc.collection.model.base.BaseCollectionTrade;
import com.mybank.pc.merchant.model.MerchantInfo;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class CollectionTrade extends BaseCollectionTrade<CollectionTrade> {
	public static final CollectionTrade dao = new CollectionTrade().dao();

	private MerchantInfo merchantInfo;

	private User oper;

	private CollectionClear collectionClear;

	public void setMerchantInfo(MerchantInfo merchantInfo) {
		this.merchantInfo = merchantInfo;
	}

	public MerchantInfo getMerchantInfo() {
		return this.merchantInfo;
	}

	public User getOper() {
		return oper;
	}

	public void setOper(User oper) {
		this.oper = oper;
	}

	public CollectionClear getCollectionClear() {
		return collectionClear;
	}

	public void setCollectionClear(CollectionClear collectionClear) {
		this.collectionClear = collectionClear;
	}

	public String getTradeTypeTxt() {
		String tradeType = getTradeType();
		if ("1".equals(tradeType)) {
			return "代收";
		}
		if ("2".equals(tradeType)) {
			return "代付";
		}
		return "";
	}

	public String getBussTypeTxt() {
		String bussType = getBussType();
		if ("1".equals(bussType)) {
			return "加急";
		}
		if ("2".equals(bussType)) {
			return "批量";
		}
		return "";
	}

	public String getFinalCodeTxt() {
		String finalCode = getFinalCode();
		if ("0".equals(finalCode)) {
			return "成功";
		}
		if ("1".equals(finalCode)) {
			return "处理中";
		}
		if ("2".equals(finalCode)) {
			return "失败";
		}
		return "";
	}

	public String getClearStatusTxt() {
		String clearStatus = getClearStatus();
		if ("0".equals(clearStatus)) {
			return "已清分";
		}
		if ("1".equals(clearStatus)) {
			return "未清分";
		}
		return "";
	}

	public static Page<CollectionTrade> getMerInfo(Page<CollectionTrade> page) {
		getMerInfo(page.getList());
		return page;
	}

	public static List<CollectionTrade> getMerInfo(List<CollectionTrade> tradeList) {
		if (CollectionUtils.isEmpty(tradeList)) {
			return tradeList;
		}

		try {
			Map<Integer, MerchantInfo> merInfos = new HashMap<Integer, MerchantInfo>();
			Integer merchantID = null;
			MerchantInfo merchantInfo = null;
			for (CollectionTrade collectionTrade : tradeList) {
				merchantID = collectionTrade.getMerchantID();
				if (merchantID == null) {
					continue;
				}
				if ((merchantInfo = merInfos.get(merchantID)) == null) {
					merchantInfo = MerchantInfo.dao.findById(merchantID);
					merInfos.put(merchantID, merchantInfo);
				}
				collectionTrade.setMerchantInfo(merchantInfo);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return tradeList;
	}

	public static List<CollectionTrade> getOperInfo(List<CollectionTrade> tradeList) {
		if (CollectionUtils.isEmpty(tradeList)) {
			return tradeList;
		}

		try {
			Map<String, User> userInfos = new HashMap<String, User>();
			String userId = null;
			User user = null;
			for (CollectionTrade collectionTrade : tradeList) {
				userId = collectionTrade.getOperID();
				if (StringUtils.isBlank(userId)) {
					continue;
				}
				if ((user = userInfos.get(userId)) == null) {
					user = User.dao.findById(userId);
					userInfos.put(userId, user);
				}
				collectionTrade.setOper(user);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return tradeList;
	}

	public static List<CollectionTrade> getCollectionClear(List<CollectionTrade> tradeList) {
		if (CollectionUtils.isEmpty(tradeList)) {
			return tradeList;
		}

		try {
			Map<Integer, CollectionClear> collectionClears = new HashMap<Integer, CollectionClear>();
			Integer clearID = null;
			CollectionClear collectionClear = null;
			for (CollectionTrade collectionTrade : tradeList) {
				clearID = collectionTrade.getClearID();
				if (clearID == null) {
					continue;
				}
				if ((collectionClear = collectionClears.get(clearID)) == null) {
					collectionClear = CollectionClear.dao.findById(clearID);
					collectionClears.put(clearID, collectionClear);
				}
				collectionTrade.setCollectionClear(collectionClear);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return tradeList;
	}

	public CollectionTrade findAndSetMerInfo() {
		try {
			Integer merchantID = getMerchantID();
			if (merchantID != null) {
				setMerchantInfo(MerchantInfo.dao.findById(merchantID));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return this;
	}

	public static List<CollectionTrade> find(Kv kv) {
		SqlPara sqlPara = Db.getSqlPara("collection_trade.findTradeList", kv);
		return getMerInfo(CollectionTrade.dao.find(sqlPara));
	}

	public static Page<CollectionTrade> findPage(int pageNumber, int pageSize, Kv kv) {
		SqlPara sqlPara = Db.getSqlPara("collection_trade.findTradeList", kv);
		return getMerInfo(CollectionTrade.dao.paginate(pageNumber, pageSize, sqlPara));
	}

	public static CollectionTrade findByTradeNo(UnionpayCollection unionpayCollection) {
		SqlPara sqlPara = Db.getSqlPara("collection_trade.findByTradeNo", unionpayCollection);
		return dao.findFirst(sqlPara);
	}
}
